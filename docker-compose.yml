services:
  # Contenedor de la BBDD
  mysql:
    image: mysql:8
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: dentalium
      MYSQL_USER: roberto
      MYSQL_PASSWORD: roberto
    ports:
      - "3306:3306"
    networks:
      - dentalius
    volumes:
      # Volumenes montados o vinculados:  (Con este, se enlaza a un directorio especifico del proyecto)
      - ./dentalium.sql:/docker-entrypoint-initdb.d/dentalium.sql # La primera vez que se ejecuta la imagen de mysql, se ejecuta este script
      - ./data/mysql:/var/lib/mysql
      # Volumenes nombrados (Con este, Docker gestiona la ubicacion f√≠sica y lo guarda en sus rutas internas. Solo se puede ver desde el volumen de Docker)
      #- mysql_data:/var/lib/mysql

  # Contenedor del backend
  backend:
    build:
      context: ./back/dentalium
      dockerfile: Dockerfile
    container_name: dentalium-backend
    ports:
      - "8080:8080"
    environment:
      - DB_URL=jdbc:mysql://mysql:3306/dentalium
      - DB_USER=root
      - DB_PASSWORD=root
      - CERTIFICATE_PASSWORD=
      - JWT_SECRET=
      - MAIL_USERNAME=dentalium.adm@gmail.com
      - MAIL_PASSWORD=
      - FRONTEND_URL=http://localhost
      - FRONTEND_URL_2=http://localhost
    networks:
      - dentalius
    volumes:
      - ./documents:/app/documents/
    restart: on-failure
    depends_on:
      - mysql

# Contenedor del frontend
  frontend:
    build:
      context: ./front/dentalium
      dockerfile: Dockerfile
    container_name: dentalium-frontend
    ports:
      - "80:80"
    networks:
      - dentalius
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend

networks:
  # Se declara la red que conecta ambos contenedores. Por defecto es bridge, permite acceso desde la misma red ademas de localhost
  dentalius:

#volumes:
# mysql_data: